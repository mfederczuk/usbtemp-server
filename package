#!/bin/sh
# -*- sh -*-
# vim: syntax=sh
# code: language=shellscript

# Copyright (c) 2023 Michael Federczuk
# SPDX-License-Identifier: MPL-2.0 AND Apache-2.0

#region preamble

case "$-" in
	(*'i'*)
		\command printf 'script was called interactively\n' >&2
		return 124
		;;
esac

set -o errexit
set -o nounset

# enabling POSIX-compliant behavior for GNU programs
export POSIXLY_CORRECT=yes POSIX_ME_HARDER=yes

if [ "${0#/}" = "$0" ]; then
	argv0="$0"
else
	argv0="$(basename -- "$0" && printf x)"
	argv0="${argv0%"$(printf '\nx')"}"
fi
readonly argv0

#endregion

for cmd in git dotnet; do
	if ! command -v "$cmd" > '/dev/null'; then
		printf '%s: %s: program missing\n' "$argv0" "$cmd" >&2
		exit 27
	fi
done

if [ $# -gt 0 ]; then
	printf '%s: too many arguments: %i\n' "$argv0" $# >&2
	exit 4
fi

usbtemp_server_version='0.1.0-indev03'
readonly usbtemp_server_version

# <project_root_dir>/
# |
# `-- <project_packaging_archives_dest_dir>/
#     |
#     `-- usbtemp-server-<version>-linux-x86_64.tar.gz
#     |
#     `-- usbtemp-server-<version>-windows-x86_64.zip
#
# <base_tmp_dir>/
# |
# `-- <process_tmp_dir>/
#     |
#     `-- <snapshot_dir>/
#     |   |
#     |   `-- <snapshot_repo_dir>/
#     |   |   `-- *
#     |   |
#     |   `-- <snapshot_staged_patch_file>
#     |   |
#     |   `-- <snapshot_unstaged_patch_file>
#     |
#     `-- <platforms_dir>/
#         |
#         `-- <platform_linux_dir>/
#         |   |
#         |   `-- source_repo/
#         |   |   `-- *
#         |   |
#         |   `-- <platform_linux_packaging_dest_dir>/
#         |       `-- *
#         |
#         `-- <platform_windows_dir>/
#             |
#             `-- source_repo/
#             |   `-- *
#             |
#             `-- <platform_windows_packaging_dest_dir>/
#                 `-- *

is_pathname_absolute() {
	test "${1#/}" != "$1"
}

# the `realpath` command is not part of POSIX, but GNU coreutils, so we need to create a replacement ourselves
make_pathname_absolute() {
	if is_pathname_absolute "$1"; then
		printf '%s' "$1"
		return
	fi

	# moving $1 to $2
	set -- '' "$1"

	# storing the current working directory pathname in $1
	set -- "$(pwd -L && printf x)"  "$2" || return
	set -- "${1%"$(printf '\nx')"}" "$2" || return

	printf '%s/%s' "$1" "$2"
}

#region project root directory

#region pathname variable setup

project_root_dir_pathname="$(dirname -- "$0" && printf x)"
project_root_dir_pathname="${project_root_dir_pathname%"$(printf '\nx')"}"

project_root_dir_pathname="$(make_pathname_absolute "$project_root_dir_pathname" && printf x)"
project_root_dir_pathname="${project_root_dir_pathname%x}"

readonly project_root_dir_pathname

#endregion

project_packaging_archives_dest_dir_pathname="$project_root_dir_pathname/packages"
readonly project_packaging_archives_dest_dir_pathname

current_commit_hash="$(git -C "$project_root_dir_pathname/" --no-pager rev-parse --verify HEAD)"
readonly current_commit_hash

#endregion

rm -rf -- "$project_packaging_archives_dest_dir_pathname"

#region temporary directory

#region base temporary directory pathname variable setup

base_tmp_dir_pathname="${TMPDIR:-"${TMP:-"${TEMP:-"${TEMPDIR:-"${TMP_DIR:-"${TEMP_DIR:-"/tmp"}"}"}"}"}"}"
base_tmp_dir_pathname="${base_tmp_dir_pathname%/}"

base_tmp_dir_pathname="$(make_pathname_absolute "$base_tmp_dir_pathname" && printf x)"
base_tmp_dir_pathname="${base_tmp_dir_pathname%x}"

readonly base_tmp_dir_pathname

#endregion

#region temporary process directory setup

process_tmp_dir_pathname="$base_tmp_dir_pathname/usbtemp-server-packaging-$$"
readonly process_tmp_dir_pathname


remove_process_tmp_dir() {
	rm -rf -- "$process_tmp_dir_pathname"
}

trap remove_process_tmp_dir EXIT
trap 'trap - EXIT; remove_process_tmp_dir' INT QUIT TERM


mkdir -p -- "$process_tmp_dir_pathname"

#endregion

#region repository snapshot

snapshot_dir_pathname="$process_tmp_dir_pathname/snapshot"
readonly snapshot_dir_pathname


snapshot_repo_dir_pathname="$snapshot_dir_pathname/repo.git"
readonly snapshot_repo_dir_pathname

git clone --no-hardlinks --bare -- "file://$project_root_dir_pathname/" "$snapshot_repo_dir_pathname"
git -C "$snapshot_repo_dir_pathname/" update-ref --no-deref HEAD "$current_commit_hash"


git_raw_diff() {
	git -C "$project_root_dir_pathname/" \
	    -c diff.noprefix=false \
	    --no-pager \
	    diff --patch-with-raw \
	         -z \
	         --no-color \
	         --full-index \
	         --binary \
	         "$@"
}


snapshot_staged_patch_file_pathname="$snapshot_dir_pathname/staged-changes.patch"
readonly snapshot_staged_patch_file_pathname

git_raw_diff --staged --output="$snapshot_staged_patch_file_pathname"


snapshot_unstaged_patch_file_pathname="$snapshot_dir_pathname/unstaged-changes.patch"
readonly snapshot_unstaged_patch_file_pathname

git_raw_diff --output="$snapshot_unstaged_patch_file_pathname"


unset -f git_raw_diff

#endregion

#region platform packages

clone_snapshot_repo() {
	git -c advice.detachedHead=false clone --no-hardlinks --depth=1 \
	                                       -- "file://$snapshot_repo_dir_pathname/" "$1" || return

	# applying staged changes only to the index
	git -C "$1/" apply --cached --ignore-whitespace --whitespace=nowarn --allow-empty \
	                   -- "$snapshot_staged_patch_file_pathname" || return

	# applying staged changes only to the working tree
	git -C "$1/" apply --ignore-whitespace --whitespace=nowarn --allow-empty \
	                   -- "$snapshot_staged_patch_file_pathname" || return

	# applying unstaged changes only to the working tree
	git -C "$1/" apply --ignore-whitespace --whitespace=nowarn --allow-empty \
	                   -- "$snapshot_unstaged_patch_file_pathname"
}

platforms_dir_pathname="$process_tmp_dir_pathname/platforms"
readonly platforms_dir_pathname

# $1: platform directory pathname
# $2: platform packaging destination directory pathname
# $3: dotnet runtime ID
package_for_platform() {
	set -- "$1" "$2" "$3" "$1/source_repo" || return


	mkdir -p -- "$1" || return

	clone_snapshot_repo "$4" || return

	printf '\n' >&2

	mkdir -p -- "$2" || return
	dotnet publish "$4/" \
	               --output "$2/" \
	               --self-contained \
	               --runtime "$3" \
	               --configuration 'Release' || return

	# removing the files that aren't actually needed for distribution. idk why these are also generated
	rm -f -- "$2/"*'.json' \
	         "$2/"*'.pdb' \
	         "$2/web.config"
}

#region linux x86_64

printf '\n\n======================== Packaging for Linux (x86_64) =========================\n\n' >&2

platform_linux_dir_pathname="$platforms_dir_pathname/linux-x86_64"
readonly platform_linux_dir_pathname

platform_linux_packaging_dest_dir_name="usbtemp-server-$usbtemp_server_version-linux-x86_64"
readonly platform_linux_packaging_dest_dir_name

platform_linux_packaging_dest_dir_pathname="$platform_linux_dir_pathname/$platform_linux_packaging_dest_dir_name"
readonly platform_linux_packaging_dest_dir_pathname

package_for_platform "$platform_linux_dir_pathname" "$platform_linux_packaging_dest_dir_pathname" 'linux-x64'

(
	printf '\nArchiving: (.tar.gz)\n' >&2

	mkdir -p -- "$project_packaging_archives_dest_dir_pathname"

	cd -- "$platform_linux_dir_pathname/"
	tar -cvzf "$project_packaging_archives_dest_dir_pathname/$platform_linux_packaging_dest_dir_name.tar.gz" \
	          "$platform_linux_packaging_dest_dir_name/"
)

printf '\n===============================================================================\n' >&2

#endregion

#region windows x86_64

printf '\n======================= Packaging for Windows (x86_64) ========================\n\n' >&2

platform_windows_dir_pathname="$platforms_dir_pathname/windows-x86_64"
readonly platform_windows_dir_pathname

platform_windows_packaging_dest_dir_name="usbtemp-server-$usbtemp_server_version-windows-x86_64"
readonly platform_windows_packaging_dest_dir_name

platform_windows_packaging_dest_dir_pathname="$platform_windows_dir_pathname/$platform_windows_packaging_dest_dir_name"
readonly platform_windows_packaging_dest_dir_pathname

package_for_platform "$platform_windows_dir_pathname" "$platform_windows_packaging_dest_dir_pathname" 'win-x64'

(
	printf '\nArchiving: (.zip)\n' >&2

	mkdir -p -- "$project_packaging_archives_dest_dir_pathname"

	cd -- "$platform_windows_dir_pathname/"
	zip -r "$project_packaging_archives_dest_dir_pathname/$platform_windows_packaging_dest_dir_name.zip" \
	       "$platform_windows_packaging_dest_dir_name/"
)

printf '\n===============================================================================\n' >&2

#endregion

unset -f package_for_platform \
         clone_snapshot_repo

#endregion

#endregion

printf '\n\nDone.\n' >&2
